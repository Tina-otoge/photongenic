{% extends "base.html.j2" %}

{% block content%}
<style>
{% if photon.config.get('disable_wake_ui') %}
#btn-wake-all, .wake {
    display: none;
}
{% endif %}
</style>
<div class="row">

    <h1>Dashboard</h1>

    <p>
        <a class="btn" id="btn-wake-all">Wake all</a>
    </p>
    <div class="grid">
        {% for client in photon.clients.values() %}
        <div class="col s12 m6 l4">
            <div class="client card" data-id="{{ client.id }}">
                {% if client.image %}
                <div class="card-image">
                    <img src="{{ url_for('custom.static', filename=client.image) }}" />
                    <span class="card-title">{{ client.name }}</span>
                </div>
                {% else %}
                <div class="card-title">{{ client.name }} (#{{ client.id }})</div>
                {% endif %}
                <div class="card-content">
                    <div class="meta">
                        <span class="id badge">#{{ client.id }}</span>
                        <span class="state">
                            Unknown
                        </span>
                    </div>

                    <div class="results">
                    </div>
                </div>
                <div class="card-action">
                    <a class="export">Export</a>
                    <a class="wake">Wake</a>
                    <a class="preview" href="{{ url_for('preview', id=client.id) }}">Preview</a>
                </div>
            </div>
        </div>
        {% endfor %}
    </div>
</div>

</div>
<script>
    let wakers = [];

    document.querySelector('#btn-wake-all').addEventListener('click', () => {
        for (let waker of wakers) {
            waker();
        }
    });

    for (let client of document.querySelectorAll('.client')) {
        let result = client.querySelector('.results');
        let state = client.querySelector('.state');
        client.querySelector('.export').addEventListener('click', async () => {
            result.innerHTML = 'Exporting...';
            let response = await fetch(`${client.dataset.id}/export`, { method: 'POST' });
            // let json = await response.json();
            // result.innerHTML = `<a href="${json.url}">Download export</a>`;
            if (!response.ok)
                result.innerHTML = 'Could not export.';
            else
                result.innerHTML = 'Exported.';
        });

        async function wake() {
            result.innerHTML = 'Waking up...';
            try {
                let response = await fetch(`${client.dataset.id}/wake`, { method: 'POST' });
                if (!response.ok)
                    throw new Error();
                result.innerHTML = (await response.json()).status ? 'Success.' : 'Failure.';
            } catch (e) {
                result.innerHTML = 'Error sending signal';
            }
        }
        wakers.push(wake);

        client.querySelector('.wake').addEventListener('click', wake);

        let refresh = async () => {
            setTimeout(refresh, 5000);
            let active = false;
            let state_text = '';
            try {
                let response = await fetch(`${client.dataset.id}/`);
                if (!response.ok)
                    throw new Error();
                let json = await response.json();
                // result.innerHTML = `<code>${JSON.stringify(json)}</code>`;
                active = json.active;
                state_text = active ? 'Running' : 'Offline';
            } catch (e) {
                state_text = 'Error';
            } finally {
                client.classList.remove('inactive');
                client.classList.remove('active');
                client.classList.add(active ? 'active' : 'inactive');
                state.innerHTML = state_text;
            }
        };
        refresh();
    }
</script>
{% endblock %}
